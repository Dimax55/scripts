Docker

docker — це сервіс для запуску застосунків в контейнерах

переваги:
- застосунки запускаються в ізольованому середовищі
- легко запускати застосунки на різних серверах
- всі залежності застосунку встановлюються в середині контейнера
- легко маштатабуються шлахом збільшення контейнерів

-------------------------------------------------------------------------------------------------------------------
компоненти :

- контейнер — це самий маленький компонент в світі docker

-клієнт(client) — за допомогою клієнта можна підключатися до служби docker

-служба(daemon)- відповідає за всі задачі створення контейнера та обробку запросів від клієнта

-host — компютер на якому запущений docker

-образ(image) — основа для створення контейнерів

-репозиторій — місце де знаходяться різні версії образів

-реєстр — місце де знаходяться різні репозиторії(docker hub)

------------------------------------------------------------------------------------------------------------------------

всі контейнери на одному хості docker розприділяють між собою всі доступні ресірси (память,процесор,мережеві ресурси) та використовують загальне ядро linux на хості

кожен образ складається з слоїв, кожен слой це набор файлів. У кожного образа є базовий слой та слої які добавляються до базавого.

Репозиторій — це набор версій одного і того ж образа. У кожної версії можуть бути свої тегі(версії)

------------------------------------------------------------------------------------------------------------------------

docker version 

docker ps -a   					список запущених та зупинених контейнерів

docker ps        					список запущений контейнер

docker images  				 список локальних образів

docker run <name image><:tag>		створити та запустити контейнер

docker system prune -a			видалити всі імеджі

docker run -it <name image or id>		підключитися всередину контейнера 

docker container prune			видалити всі зупинені контейнери 

docker run -d nginx				запустити у фоновому режимі

docker container inspect <id or name>	побачити деталі контейнера 

docker stop <id or name>			зупинити контейнер (в фоновому режимі)
docker kill


docker exet -it <id or name> bin/sh
docker exec -it <id or name> bash		виконати команду в запущеному контейнері. Можна напустити люби процес якщо контейнер запущений

docker run -d - - name my_name <image>   	назвати контейнер

docker run -p 8080:80 nginx			проброс портів(зовнішній порт та порт контейнера)
публікація портів контейнера 

docker run -v ${PWD}:/usr/share/nginx/html nginx	підключення томів/мепінг томів 
шлях до локальної папки, щлях до папки в середині контейнера 

docker run -it —rm <imade> 	--rm  автоматично видалити після зупинки

------------------------------------------------------------------------------------------------------------------------

створення образів (image)

- створити Dockerfile

-зазвичай Dockerfile розміщають в папці застосунку

-Dockerfile має інструкції по створеню образа 

-при створені образа вказують імя та тег 

-на основі готового образа можна створювати контейнери


docker build . 					створити образ

docker biuld / home /dima /Dockerfile	створи образ

docker biuld -f file.exe			створити з файлу яки не зветься dockerfile

docker build . -t my-calendar :4.1.3		створити образ та додати імя та тег

------------------------------------------------------------------------------------------------------------------------

DOCKER COMPOSE — дозволяє запускати декілька контейнерів одною командою, а також 

ці контейнери можна зупинити та видалити також одною командою
імперативний підхід — виконувати якісь задачі кожен через команду в терміналі(run, build,..)

(давати  докеру інструкцію кожен раз для виконання певної дії)

декларативний підхід — описуємо бажаний результат в файлі .yml (хочу зробити N кількість контейнерів, 

які порти мають бути відкриті, тощо). Створюються за допомогою .yml файлу 

формат YAML : список, словник 

переваги docker compose:

- декларативний підхід по створенню кентейнерів

-всі необхідні контейнери запускаються одною командою

-автоматичне створення необхідного образа на основі Dockerfile кожного застосунку

-автоматичне створення ізольованої мережі для взаємодії контейнерів

-за допомогою  DNS можливо взаємодія між контейнерами використоюючи імена сервісів

------------------------------------------------------------------------------------------------------------------------

зайти в папку де знаходиться файл docker-compose.yml

docker-compose up				запуск компоус

docker-compose up -d			запустити в фоновому режимі

docker-compose down			зупинити та видалити контейнери в компоус

docker-compose up -d - -build		перестворити образ в compose (даємо докеру 

інструкцію заново створити всі необхідні образи)

docker logs <id>				вивести логі 














root@dima:/home/dima/test/container-id-web-server# docker swarm init --advertise-addr 10.10.13.150


root@dima:/home/dima/test/container-id-web-server# docker swarm leave


root@dima:/home/dima/test/container-id-web-server# docker swarm leave —force


root@dima:/home/dima/test/container-id-web-server# docker swarm init --advertise-addr 10.10.13.150



---------------------------------------------------------------------------------------
DOCKER SWARM
apt update
snap istall docker
docker swarm init --advertise-addr  192.168.1.56

docker swarm join-token manager   глянути токен і команду мастера
docker swarm join-token worker    глянути токен і команду воркера

docker node ls

docker service create --name test1 -p 8080:80 --mode global francois/apache-hostname

docker servece ls

docker rm -f id

docker swarm init --force-new-cluster

docker swarm leave
docker swarm leave --force
https://docs.docker.com/reference/cli/docker/swarm/
docker swarm








