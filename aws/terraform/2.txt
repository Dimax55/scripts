#-----------------------------
#My Terraform config
#Build WebServer 
#-----------------------------

provider "aws" {
	region = "eu-central-1"
}

resource "aws_instance" "my_webserver" {
	ami = "ami-hioihvwhiov" 	#Amazon Linux AMI
	instance_type = "t3.micro"
	vpc_security_group_ids = [aws_security_group.my_webserver.id] 	#додати групову політику до сервера(або декілька)
	#створили залежність, спочатку створиться група а потім інстанс
	
	user_data = <<EOF 		#записуємо вложенні команд(shell script) для запуску apache2 на сервері
#!/bin/bash
yum -y update
yum -y install httpd
myip='curl http://169.254.169.254/latest/meta-data/local-ipv4'
echo "<h2>WebServer with IP: $myip</h2><br>Build by Terraform!" > /var/www/html/index.html
sudo service httpd start
chkconfig httpd on
EOF

}

#
resource "aws_security_group" "my_webserver" {
  name        = "WebServer Security Group"
  description = "my first securityGroup"

	ingress {	#те що приходить на сервер
	 from_port = 80
	 to_port = 80
	 protocol = "tcp"
	 cidr_blocks = ["0.0.0.0/0"]
	}
	
	ingress {	#те що приходить на сервер
	 from_port = 443
	 to_port = 443
	 protocol = "tcp"
	 cidr_blocks = ["0.0.0.0/0"]
	}

	egres {		#те що йде від сервера
	 from_port = 0
	 to_port = 0
	 protocol = "-1"
	 cidr_blocks = ["0.0.0.0/0"]
	}

}
#terraform init
#terraform plan
#terraform apply  (yes)
#Apply complete! Resources: 2 added,0 changed,0 destroyed.

-----------------------------
#добавляємо тег в resorce "aws_instance" 
tags = {
Name = "Web server build by terraform"
Owner = "test user1"
}
#terraform plan
#terraform apply  (yes)
 #Apply complete! Resources: 0 added,1 changed,0 destroyed.



#terraform destroy
------------------------------------------


#оптимізація 1.0
#тепер shell скрипт виносино в окремий файл

touch user_data.sh
	#!/bin/bash
	yum -y update
	yum -y install httpd
	myip='curl http://169.254.169.254/latest/meta-data/local-ipv4'
	echo "<h2>WebServer with IP: $myip</h2><br>Build by Terraform!" > /var/www/html/index.html
	sudo service httpd start
	chkconfig httpd on

# в полі user_data = file("./user_data.sh")
terraform plan
terraform apply

!!!! якщо знінювати user_data.sh інстанс буде видаляться і ствроюватися інший
(зупинеться, видалиться та створиться іншого)


----------------------------------------------
#оптимізвція 2.0

Templatefile

динамічні файли - це файл в який ми напсилаємо змінні і файл генерується в залежності
від наших змінних

sudo mv user_data.sh user_data.sh.tpl (розширення для template file)

# полі user_data = templatefile("./user_data.sh.tpl",{     #знінюємо файл , додаємо знімінні
	f_name = "Bob",
	l_name = "Smith",
	names = ["bob", "bob2", "den3"]
	})

nano user_data.sh.tpl

	#!/bin/bash
	yum -y update
	yum -y install httpd

	myip='curl http://169.254.169.254/latest/meta-data/local-ipv4'

	cat <<EOF > /var/www/html/index.html
	<html>
	<h2>Build by power of Terraform <font color='red'> hello </font></h2><br>
	Owner ${f_name} ${l_name} <br>
	#виводимо змінні

	%{ for x in names  ~}
	Hello to ${x} from ${f_name}<br>
	%{ endfor ~}
	#виводимо змініні циклом

	</html>
	EOF

	sudo service httpd start
	chkconfig httpd on


terraform plan
terraform apple

-------------------------
тестування коду без підняття ресурсів
( що видасть файл з котом)

terraform console

#тестуємо файл
> file("./user_data.sh.tpl") #видає всі що там відбудиться

#тестуємо функцію  без деплойменту
> templatefile("./user_data.sh.tpl",{f_name = "Bob",l_name = "Smith",names = ["bob", "bob2", "den3"]})

----------------------------------------------
Динамічні блоки коду - dynamic



provider "aws" { . . . }
resource "aws_eip" "my_statis_ip { . . . }
resource "aws_instance" "my_webserver" { . . . }

#удосконалюємо код, змінюємо sycurity group
resource "aws_security_group" "my_webserver" {
  name        = "WebServer Security Group"
  description = "my first securityGroup"

  dynamic "ingress" {

	for_each = ["80", "443", "8080", "1541"]   #цикл пройдеться та встаить порти


	content {
	 from_port = ingress.value    #встанляються номера портів через цикл
	 to_port = ingress.value
	 protocol = "tcp"
	 cidr_blocks = ["0.0.0.0/0"]
		}


	egres {		#те що йде від сервера
	 from_port = 0
	 to_port = 0
	 protocol = "-1"
	 cidr_blocks = ["0.0.0.0/0"]
		}

        ingress {	#відкрити ssh в мережі  VPC
	 from_port = 22
	 to_port = 22
	 protocol = "tcp"
	 cidr_blocks = ["10.10.10.0/16"]
	}

	}
}

. . .

terraform plan
terraform apply

--------------------------
LifeCycle  # при змінах коду буде вибивати помилку
	   # сервнер не буде зупиняться та вимикатися



provider "aws" { . . . }

resource "aws_instance" "my_webserver" { 
 
 .  .  .

	lifecycle {
		prevent_destroy = true	#щоб випадково по помилці не вимкнути важливий сервер(database server)
	}
}

  .  .  .

--------------------------
#також можна створювати lifecycle  на інші зміни

	lifecycle {
		ignore_changes = ["ami", "user_data"]	#ігнорує зміни зі зміненням ami або файла .sh
	}



------------------------------
#приєднання Elastic IPs




provider "aws" { . . . }

resource "aws_eip" "my_statis_ip { . . . }

resource "aws_instance" "my_webserver" {
	ami = "ami-hioihvwhiov" 	#Amazon Linux AMI
	instance_type = "t3.micro"
	user_data = templatefile("./user_data.sh.tpl")
	f_name = "bob"
	l_name = "smith"
	tags = {
		name = "Web Server nuild ny terraform"
		owner = "user_test1"
		}
}
resource "aws_security_group" "my_webserver" { . . . }

----------------------------
#робиио майже zero down time
#створюємо новий сервер а потім переносимо дані на нього зі старого та видаляємо старий

provider "aws" { . . . }
resource "aws_eip" "my_statis_ip" { . . . }

resource "aws_instance" "my_webserver" {
	ami = "ami-hioihvwhiov" 	#Amazon Linux AMI
	instance_type = "t3.micro"
	user_data = templatefile("./user_data.sh.tpl")
	f_name = "bob"
	l_name = "smith"
	tags = {
		name = "Web Server nuild ny terraform"
		owner = "user_test1"
		}
	
	lifecycle {
		create_before_destroy = true	#створити перед тим як видаляєш
		  }

resource "aws_security_group" "my_webserver" { . . . }


terraform plan
terraform apply
	Apply complete! Resources: 1 added, 1 changed, 1 destroyed.

--------------------------
Вивід результатів - Outputs
#виводити результат дій в aws  при запуску кода

provider "aws" { . . . }
resource "aws_eip" "my_statis_ip" { . . . }
resource "aws_instance" "my_webserver" { . . . }
resource "aws_security_group" "my_webserver" { . . . }

output "webserver_instance_id" {
	value = aws_instance.my_webserver.id
}



terraform plan
terraform apple
	Apply complete! Resources: 1 added, 1 changed, 1 destroyed.
	Outputs:
	webserver_instance_id = i-39234kfvkkvfk		 #виводить instance ID

---------------------
#показати адресу


provider "aws" { . . . }
resource "aws_eip" "my_statis_ip" { . . . }
resource "aws_instance" "my_webserver" { . . . }
resource "aws_security_group" "my_webserver" { . . . }
output "webserver_instance_id" { . . . }

output "webserver_public_ip_address" {
	value = "aws_eip.my_static_ip.public_ip"
}


terraform plan
terraform apply
	Apply complete! Resources: 1 added, 1 changed, 1 destroyed.
	Outputs:
	webserver_instance_id = i-39234kfvkkvfk		 #виводить instance ID
	weserver_public_ip_address = 35.182.80.243


terraform output
	weserver_public_ip_address = 35.182.80.243
	webserver_instance_id = i-39234kfvkkvfk
terraform show


output "webserver_secGroup_id" {
	value = aws_security_group.my_webserver.ip
}
output "webserver_secG_arn" {
	value = aws_security_group.my_webserver.arn
	description = "this is security group ARN"
}

-------------
#прийнято output  примати в іншому файлі

touch outputs.tf
nano  output1.....2..

---------------

